#!/usr/bin/env bash
###################################################
# SnapRAID DAILY
###################################################
# COOYRIGHT (C) Mark Finnan 2021
###################################################

###################################################
# RETURN CODES
###################################################
# 0 - Success
# 1 - All Errors
# 2 - Snapraid already in use
# 3 - Files Modified During Sync
# 5 - Thresholds Exceeded
#
# VERSION
version=1.2.6

###################################################
# FUNCTIONS
###################################################

###################################################
# LOGGING FUNCTIONS
###################################################
# Do Not Prefix the Time but Log to the email body log file
function log_to_email() {
  echo "$@" | tee -a $email_body_logfile
}

# Prefix the time and output to email body log file
function log_to_email_time() {
  echo $(date +%H:%M:%S) ":" "$@" | tee -a $email_body_logfile
}

# Generate the necessary logfiles in /tmp using mktemp
function generate_logfiles {

  # Do a quick cursory check to see if /tmp is writable, it should
  # be but if something like systemd hardening is being used, then
  # it may not be
  if [ ! -w "/tmp/" ]
  then
    echo "ERROR: /tmp directory is not writable - Exiting"
    exit 1
  fi

  # Tmp file Prefix - ".txt" added at the end so they don't cause
  # issues when they are sent on as email attachments
  tmp_file_prefix="snapraid-daily.XXXXX.txt"

  # Generate Logfiles
  status_logfile=$( mktemp -t "${tmp_file_prefix}" )
  touch_logfile=$( mktemp -t "${tmp_file_prefix}" )
  diff_logfile=$( mktemp -t "${tmp_file_prefix}" )
  sync_logfile=$( mktemp -t "${tmp_file_prefix}" )
  scrub_logfile=$( mktemp -t "${tmp_file_prefix}" )
  scrub_diff_logfile=$( mktemp -t "${tmp_file_prefix}" )
  email_body_logfile=$( mktemp -t "${tmp_file_prefix}" )

  # Command Output Logfiles
  scrub_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  sync_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  touch_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  diff_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
}

##################################################
# SNAPRAID COMMANDS
##################################################
function snapraid_status_cmd() {
  # Call Snapraid Status and deposit the output into a logfile 
  # for analysis. Can't use -l option here as it doesn't print out 
  # things like "No error detected."
  snapraid -c "$snapraid_config_file_path" status &> $status_logfile
}

function snapraid_status_to_email() {
  # Call Snapraid status and put the append the output into the email
  # body logfile
  snapraid -c "$snapraid_config_file_path" status | tee -a $email_body_logfile
}

function snapraid_touch_cmd() {
  # Call snapraid touch to update timestamps. Suppress all output if
  # -q, --quiet option is set
  if [ $quiet_option == 1 ]
  then
    snapraid -c "$snapraid_config_file_path" touch -v -l $touch_command_logfile | tee $touch_logfile &> /dev/null
  else
    snapraid -c "$snapraid_config_file_path" touch -v -l $touch_command_logfile | tee $touch_logfile
  fi
}

function snapraid_diff_cmd() {
  # Call snapraid diff & re-direct the output to a file for analysis
  # Suppress all output if the -q, --quiet option is set. Take care not to
  # use tee -a as diff command can be called multiple times
  if [ $quiet_option == 1 ]
  then
    snapraid -c "$snapraid_config_file_path" -v -l $diff_command_logfile diff | tee $diff_logfile &> /dev/null
  else
    snapraid -c "$snapraid_config_file_path" -v -l $diff_command_logfile diff | tee $diff_logfile
  fi
}

function snapraid_sync_cmd() {
  ###################################################
  # Call Snapraid Sync with -v, -h & -l switches to
  ###################################################
  # 1. Verbose Mode
  # 2. Utilize Snapraid's logging function to allow for debugging
  # if need be, and to include in the email logfile if an error
  # is detected
  ###################################################
  # Suppress all output if the -q, --quiet option is set
  if [ $quiet_option == 1 ]
  then
    snapraid -c "$snapraid_config_file_path" -v sync -l $sync_command_logfile | tee $sync_logfile &> /dev/null
  else
    snapraid -c "$snapraid_config_file_path" -v sync -l $sync_command_logfile | tee $sync_logfile
  fi
}

function snapraid_scrub_cmd() {
  ###################################################
  # SnapRAID Scrub
  ###################################################
  # Call Scrub Command with parameters from config file. Suppress
  # all output if the -q, --quiet option is selected.
  if [ $quiet_option == 1 ]
  then
    snapraid -c "$snapraid_config_file_path" -v -p $scrub_percent -o $scrub_age -l $scrub_command_logfile scrub | tee -a $scrub_logfile &> /dev/null
  else
    snapraid -c "$snapraid_config_file_path" -v -p $scrub_percent -o $scrub_age -l $scrub_command_logfile scrub | tee -a $scrub_logfile
  fi 
}

##################################################
# OTHER FUNCTIONS
##################################################

# Read Config File parameters in. If it is not present, exit
# the script.
function read_config_file {

  # Find script source directory
  source_directory=$(dirname "$BASH_SOURCE")

  # Check if the Logfile directory (/tmp), this should always be the
  # case, but in the event something like systemd hardening is being used
  # it may not be writable
  if [ ! -w "/tmp/" ]
  then
    echo "ERROR: /tmp directory not writable for logfiles - Exiting"

    # Exit with Status 1 to flag an error
    exit 1
  fi

  # Configuration Files are read in the following order of preference
  # 1 - Custom Config file if specified by the -f or --config options
  # 2 - /etc/snapraid-daily.conf
  # 3 - Same directory as script
  config_file0="${custom_config_file}"
  config_file1="/etc/snapraid-daily.conf"
  config_file2="${source_directory}""/snapraid-daily.conf"

  # Check for Custom Config File, there's already a check that it exists in
  # the parse arguments function, so this check is kind of redundant
  if [ -r "${config_file0}" ]
  then
    echo "Using Config File:" "${config_file0}"
    source "${config_file0}"

  # Otherwise check the Default Config File Exists (/etc/snapraid-daily.conf)
  elif [ -r "${config_file1}" ]
  then
    echo "Using Config File:" "${config_file1}"
    source "${config_file1}"

  # Otherwise check for the config file within the script folder
  elif [ -r "${config_file2}" ]
  then
    echo "Using Config File:" "${config_file2}"
    source "${config_file2}"

  # No Config File Found - Print Message about defaults and move on
  else
    echo "WARNING: No config file found in any of the following locations:"
    echo "1. Specified with the -f or --config option"
    echo "2: /etc/snapraid-daily.conf"
    echo "3: snapraid-daily.conf in script directory:" "${source_directory}"
    echo ""
    echo "All Defaults will be used"
    echo "See the manual entry for snapraid-daily.conf(1)"
    echo ""
  fi

  # Check if all of the parameters are defined correctly within
  # the "config.sh" config file. If any are undefined, set defaults
  # Check the master snapraid config file path is present in snapraid-daily.conf,
  # if not default to using /etc/snapraid.conf
  if [ -z "$snapraid_config_file_path" ]
  then
    # No Config Path defined in snapraid-daily.conf for snapraid itself
    # Default to /etc/snapraid.conf, exit if that's not found
    if [ ! -r "/etc/snapraid.conf" ]
    then
      echo "ERROR: snapraid_config_file_path missing in snapraid-daily.conf and /etc/snapraid.conf not found - Exiting"
      echo ""
      exit 1
    else
      echo "WARNING: snapraid_config_file_path not defined in snapraid-daily.conf - Using /etc/snapraid.conf"
      snapraid_config_file_path="/etc/snapraid.conf"
    fi
  fi

  # Check for a Valid muttrc file. If not found, disable the email functionality
  if [ ! -r "$muttrc_path" ]
  then
    echo "WARNING: muttrc_path missing in snapraid-daily.conf, not found or not readable - No Emails will be sent"
    enable_emails=0
  else
    # Otherwise - Check an email address was defined in snapraid-daily.conf
    if [ -z "$email_address" ]
    then
      echo "WARNING: email_address missing from snapraid-daily.conf - No Emails will be sent"
      enable_emails=0
    else
      enable_emails=1
    fi
  fi

  # Check for the Deletion Threshold
  if [ -z $deletion_threshold ]
  then
    echo "WARNING: deletion_threshold not defined in snapraid-daily.conf - Using 100 by default"
    deletion_threshold=100
  else
    # Next Do a Sanity Check it's not less than Zero
    if [ $deletion_threshold -lt 0 ]
    then
      echo "ERROR: deletion_threshold can't be set to a negative number - Exiting"
      echo ""
      exit 1
    fi
  fi

  # Repeat the Above for the Moved Threshold
  if [ -z $moved_threshold ]
  then
    echo "WARNING: moved_threshold not defined in snapraid-daily.conf - Using 100 by default"
    moved_threshold=100
  else
    # Next Do a Sanity Check it's not less than Zero
    if [ $moved_threshold -lt 0 ]
    then
      echo "ERROR: moved_threshold can't be set to a negative number - Exiting"
      echo ""
      exit 1
    fi
  fi

  # Check for a Scrub Percent, if it doesn't exist - default to 8%
  if [ -z $scrub_percent ]
  then
    echo "WARNING: scrub_percent is not defined snapraid-daily.conf - Using 8%"
    scrub_percent=8
  else
    # Otherwise do a check its a number between 0 and 100
    if [ $scrub_percent -gt 100 ] || [ $scrub_percent -lt 0 ]
    then
      echo "ERROR: scrub_percent should be a number between 0 & 100 - Exiting"
      echo ""
      exit 1
    fi
  fi

  # Check for a Scrub Age, use 21 days if it's not present
  if [ -z $scrub_age ] || [ $scrub_age -lt 0 ]
  then
    echo "WARNING: scrub_age is not defined in snapraid-daily.conf - Using 21 days"
    scrub_age=21
  else
    # Otherwise do a check that the scrub age is a positive number
    if [ $scrub_age -lt 0 ]
    then
      echo "ERROR: scrub_age cannot be a negative number - Exiting"
      echo ""
      exit 1
    fi
  fi
}

# Sanity Check function to check if SnapRAID, mutt etc.
# are installed and that the SnapRAID config & content files
# are present.
function sanity_check {

  # Check if Snapraid is Installed
  if [ -z $(which snapraid) ]
  then
    echo "ERROR: SnapRAID is not installed - Exiting..."
    exit 1

  # Check if grep is Installed
  elif [ -z $(which grep) ]
  then
    echo "ERROR: grep is not installed - Exiting..."
    exit 1

  # Check if awk is Installed
  elif [ -z $(which awk) ]
  then
    echo "ERROR: awk is not installed - Exiting..."
    exit 1

  # Check if sed is Installed
  elif [ -z $(which sed) ]
  then
    echo "ERROR: sed is not installed - Exiting..."
    exit 1

  # Check if cut is Installed
  elif [ -z $(which cut) ]
  then
    echo "ERROR: cut is not installed - Exiting..."
    exit 1

  # Check if mktemp is Installed
  elif [ -z $(which mktemp) ]
  then
    echo "ERROR: mktemp is not installed - Exiting..."
    exit 1

  # Check for the SnapRAID Config File
  elif [ ! -r "$snapraid_config_file_path" ]
  then
    echo "ERROR: Snapraid Config File does not exist or is not readable - Exiting..."
    exit 1

  else
    # Find 1st Content File Location - Sed command picks out the 1st line
    # and removes everything before the 1st occurance of the "/" character
    # (which needs to be escaped)
    content_file=$(cat "$snapraid_config_file_path" | grep -w "^content" | sed -n 1p | sed 's/^[^\/]*\//\//' ) 

    if [ ! -w "${content_file}" ]
    then
      echo "ERROR: SnapRAID Content File does not exist or is not writable"
      echo "       Possible permissions problem?"
      exit 1
    fi
  fi

  # Check if Mutt is Installed, otherwise disable emails, the check for
  # the muttrc path and emails already will set the enable_emails check
  # so an else is not required here to set it to zero
  if [ -z $(which mutt) ]
  then
    echo "WARNING: Mutt is not installed - No emails will be sent"
    enable_emails=0
  fi
  echo ""
}

# Print a condensed help message for a quick start
function print_help {
  echo ""
  echo "Usage: snapraid-daily         [OPTIONS...]"
  echo ""
  echo "  -s, --sync-only             Only Sync the Array - Do not run Scrub"
  echo "  -c, --scrub-only            Only Scrub the Array - Do not run Sync"
  echo "                              Note that if both of these options are omitted, the"
  echo "                              default is to run sync and then scrub. They also can"
  echo "                              not be specified at the same time"
  echo "  -o, --override-thresholds   Ignore the deletion/moved thresholds to force a sync"
  echo "  -f, --config [path-to-conf] Override default config file. Could be useful if one"
  echo "                              has multiple snapraid arrays to manage on the same system"
  echo "  -q, --quiet                 Suppress the output of the touch, diff, sync and scrub"
  echo "                              commands for snapraid. The final status message is still"
  echo "                              displayed as normal."
  echo "  -h, --help                  Print help"
  echo ""
  echo "Manual Entries:"
  echo "  Main Script:                snapraid-daily(1)      $ man snapraid-daily"
  echo "  Config File:                snapraid-daily.conf(1) $ man snapraid-daily.conf"
  echo ""
  exit 0
}

# Function to Parse Input Arguments to the Script, and correctly initalize
# the variables required
function parse_arguments() {

  # Valid arguments are:
  # -o, --override-thresholds : Ignore Deletion/Moved Thresholds
  # -s, --sync-only           : Only Run Sync
  # -c, --scrub-only          : Only Run Scrub
  # -f, --config              : Override default config file
  # -h, --help                : Print Help and Exit
 
  # Loop through input args to determine what was specified
  while (( ${#} ))
  do

    # Check for Valid Arguments
    case "${1}" in

      ##########################
      # Check for Sync Only
      ##########################
      -s|--sync-only)
      sync_only=1
      ;;

      ##########################
      # Check for Scrub Only
      ##########################
      -c|--scrub-only)
      scrub_only=1
      ;;

      ##########################
      # Check for Override Thresholds
      ##########################
      -o|--override-thresholds)
      override_thresholds=1
      ;;

      ##########################
      # Check for Quiet Option
      ##########################
      -q|--quiet)
      quiet_option=1
      ;;

      #########################
      # Check if the default config is overriden
      #########################
      -f|--config)

      # Shift at the start here since the next argument should be the custom config
      shift 1

      # Check the Config File supplied exists
      if [ ! -f "${1}" ]
      then
        echo "ERROR: Specified custom config file, but given file does not exist - Exiting"
        echo ""
        print_help
      else
        custom_config_file="${1}"
      fi
      ;;

      #########################
      # Check for Help
      #########################
      -h|--help)
      print_help
      ;;

      #########################
      # Check for an Unrecognised Argument
      #########################
      *)
      echo "ERROR: Invalid Input Argument:" "${1}"
      echo ""
      print_help
      ;;
    esac

    # Shift through arguments
    shift 1

  done

  # Check if any of the above argument variables were not specified and
  # set them to their default values to prevent errors further on
  if [ -z $sync_only ]; then sync_only=0; fi
  if [ -z $scrub_only ]; then scrub_only=0; fi
  if [ -z $override_thresholds ]; then override_thresholds=0; fi
  if [ -z $quiet_option ]; then quiet_option=0; fi

  # Check if --sync-only and --scrub-only were specified at the same time
  # If so - exit with an error
  if [ $sync_only == 1 ] && [ $scrub_only == 1 ]
  then
    echo "ERROR: -s|--sync-only & -c|--scrub-only arguments can't both be specified at the same time - Exiting"
    echo ""
    print_help
    exit 1
  fi

  # Check if --override-thresholds and --scrub-only were specified at the same
  # time. Print a Warning if so.
  if [ $scrub_only == 1 ] && [ $override_thresholds == 1 ]
  then
    echo "WARNING: -o|--override-thresholds has no effect when using -c|--scrub-only"
  fi
}

# Print Greeting in Email Log
# Say what time the script was initialized at, and list
# the arguments that were specified.
function print_greeting {

  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY Version:" "${version}"
  log_to_email "##############################"
  log_to_email "Initialized at "$(date +%H:%M:%S)" on "$(date +%d/%m/%Y)
  log_to_email "Input Options:"

  # Determine what the print to the screen and the email log
  # depending on what the arguments were determined to be in the
  # parse_arguments function

  # Check for sync_only
  if [ $sync_only -eq 1 ]
  then
    log_to_email "Run-Sync: YES"
    log_to_email "Run-Scrub: NO"
  fi

  # Check for scrub_only
  if [ $scrub_only -eq 1 ]
  then
    log_to_email "Run-Sync: NO"
    log_to_email "Run-Scrub: YES"
    log_to_email "Scrub-Percent:" $scrub_percent
    log_to_email "Scrub-Age:" $scrub_age "days"
  fi

  # Check for the default condition where a sync and scrub are ran
  if [ $sync_only -eq 0 ] && [ $scrub_only -eq 0 ]
  then
    log_to_email "Run-Sync: YES"
    log_to_email "Run-Scrub: YES"
    log_to_email "Scrub-Percent:" $scrub_percent
    log_to_email "Scrub-Age:" $scrub_age "days"
  fi

  # Check if the Override Thresholds has been specified
  if [ $override_thresholds -eq 1 ]
  then
    # No need to print the deletion/move thresholds if the
    # --override-thresholds argument is being used
    log_to_email "Override Deletion/Moved Thresholds: YES"
  else
    log_to_email "Override Deletion/Moved Thresholds: NO"
    log_to_email "Deletion Threshold:" $deletion_threshold
    log_to_email "Moved Threshold:" $moved_threshold
  fi

  log_to_email "Run-Log is Below:"
  log_to_email ""
}

# Inital Check - Do an initial check of the array to see if
# any errors are present, a sync is already in progress, or
# if touch is required to update the timestamps
function initial_status_check {

  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Initial Status Check"
  log_to_email "##############################"
  log_to_email_time "Checking current status..."

  # Call snapraid status
  snapraid_status_cmd

  # Scenario 1 - Check if Snapraid is Already in Use or Not
  # If yes, exit and notify via email
  if grep -qw "SnapRAID is already in use!" $status_logfile
  then
    log_to_email_time "SnapRAID is already Use - Exiting..."
    log_to_email ""

    # Send Email & Use Status Logfile as Body
    send_email "SnapRAID-DAILY: SnapRAID In Use!"

    # Delete the logfiles and exit with Status 1 to Flag an Error in Logs
    clean_up_logfiles
    exit 2
  
  # Scenario 2 - Check for errors. These could be bad blocks or something else
  # If detected - exit and notify the user via email
  elif ! grep -qw "No error detected." $status_logfile
  then
    log_to_email_time "Found error(s) - Exiting..."
    log_to_email_time "Current Status of the Array is as below:"
    log_to_email ""

    # Call Snapraid Status to Put the Final Array Status into the Email
    snapraid_status_to_email

    # Send Email & Use Status Logfile as Body
    send_email "SnapRAID-DAILY: Inital Error(s) Present"

    # Delete the logfiles and exit with Status 1 to Flag an Error in Logs
    clean_up_logfiles
    exit 1

  # Scenario 3 - Check if a ReHash is needed.
  # If so - exit and notify the user via email
  elif ! grep -qw "No rehash is in progress or needed." $status_logfile
  then
    log_to_email_time "Rehash In-Progress/Required - Exiting..."
    log_to_email_time "Current Status of the Array is as below:"
    log_to_email ""

    # Call Snapraid Status to Put the Final Array Status into the Email
    snapraid_status_to_email

    # Send Email & Use Status Logfile as Body
    send_email "SnapRAID-DAILY: Re-Hash Warning"

    # Delete the logfiles and exit with Status 1 to Flag an Error in the Logs
    clean_up_logfiles
    exit 1

  # Scenario 4 - Check if a Sync was previously stopped while in progress
  elif ! grep -qw "No sync is in progress." $status_logfile
  then

    # No need to exit the array if a sync is in progress, as if a sync is in
    # progress, the solution is to finish the sync. 
    found_unfinished_sync=1

    # If scrub-only is selected, exit and notify the user via email
    if [ $scrub_only -eq 0 ]
    then
      log_to_email_time "Sync Already in Progress - Continuing..."
    else
      # Scrub Only is Selected
      log_to_email_time "Sync Already in Progress but Scrub-Only is selected"
      log_to_email_time "Cannot Scrub unless sync is finished - Exiting..."
      log_to_email_time "Current Status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send Email & Use Status Logfile as Body
      send_email "SnapRAID-Scrub: Sync In Progress"

      # Delete the logfiles and exit with Status 1 to Flag an Error
      clean_up_logfiles
      exit 1
    fi

  # Scenario 5 - None of the above checks found anything - Continue to Sync/Scrub
  else
    found_unfinished_sync=0
    log_to_email_time "No Issues Found in Inital Check"
  fi

  # Check if Touch is Needed and if Scrub Only is Not Selected
  # This is because touch is not performed if Scrub Only is selected.
  if [ $scrub_only -eq 0 ]
  then
    if ! grep -qw "No file has a zero sub-second timestamp." $status_logfile
    then
      # Find Number of Files Needing Touch
      number_needing_touch=$(grep "zero sub-second timestamp." $status_logfile | awk '{print $3}')

      log_to_email_time "Touch Required on "$number_needing_touch" files..."
      touch_required=1
    else
      log_to_email_time "Touch Not Needed..."
      touch_required=0
    fi
  fi
  log_to_email ""
}

# Touch Function - Run touch if it's detected that touch
# is required
function run_touch_if_needed {

  if [ $touch_required -eq 1 ]
  then
    log_to_email "##############################"
    log_to_email "# SnapRAID-DAILY: Touch"
    log_to_email "##############################"
    log_to_email_time "Starting Touch..."

    # Call Snapraid touch command
    snapraid_touch_cmd

    # Check Touch Output for Errors by looking for the
    # following text in its output
    if grep -qw "Error timing file" $touch_command_logfile
    then
      # Touch Encountered Errors
      log_to_email_time "Touch Encountered Issues - Please Investigate..."
      log_to_email_time "Current Status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send Notification Email and Attach the Touch Logfile
      send_email_with_log "SnapRAID-DAILY: Touch Warning(s)" $touch_logfile

      # Delete the Logfiles and exit with Status 1 to flag an error
      clean_up_logfiles
      exit 1

    else
      log_to_email_time "Touch Completed"
      log_to_email ""
    fi
  fi

}

# Check for Changes, Deletion Threshold & Move Threshold
function check_array_for_changes_and_thresholds {

  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Difference Check"
  log_to_email "##############################"
  log_to_email_time "Checking array for changes..."

  # Call snapraid diff command
  snapraid_diff_cmd

  # Check for differences to see if a sync is required or not
  # This method originally came from Zack Reed's script...
  number_added=$( grep -w '^ \{1,\}[0-9]* added$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  number_removed=$( grep -w '^ \{1,\}[0-9]* removed$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  number_updated=$( grep -w '^ \{1,\}[0-9]* updated$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  number_moved=$( grep -w '^ \{1,\}[0-9]* moved$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  number_copied=$( grep -w '^ \{1,\}[0-9]* copied$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  number_restored=$( grep -w '^ \{1,\}[0-9]* restored$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)

  # If any one of the above are not equal to zero, we know changes are present
  if [ $number_added -ne 0 ] || [ $number_removed -ne 0 ] || [ $number_updated -ne 0 ] || [ $number_moved -ne 0 ] || [ $number_copied -ne 0 ] || [ $number_restored -ne 0 ]
  then
    # Specify a Sync is Required
    sync_required=1
    log_to_email_time "Changes Detected"

    # Print the Above Numbers to the Email Logfile
    log_to_email "Added:" $number_added
    log_to_email "Removed:" $number_removed
    log_to_email "Updated:" $number_updated
    log_to_email "Moved:" $number_moved
    log_to_email "Copied:" $number_copied
    log_to_email "Restored:" $number_restored

    if [ $override_thresholds -eq 1 ]
    then
      log_to_email_time "Overriding Deletion/Moved Thresholds..."
      log_to_email ""
    fi
    log_to_email ""

    # Check Deletion & Moved Threshold
    if [ $number_removed -gt $deletion_threshold ] && [ $override_thresholds -eq 0 ]
    then
      log_to_email_time "DELETION Threshold Exceeded"
      log_to_email "Detected "$number_removed" deletions,"
      log_to_email "Which is greater than "$deletion_threshold
      log_to_email "Maybe a Sync is not a good idea?..."

      # Send Notification Email and Exit
      send_email "SnapRAID-DAILY: DELETION Threshold Exceeded"

      # Delete the Logfiles and exit with Status 5 to Flag the Threshold has been exceeded
      clean_up_logfiles
      exit 5

    elif [ $number_moved -gt $moved_threshold ] && [ $override_thresholds -eq 0 ]
    then
      log_to_email_time "MOVED Threshold Exceeded"
      log_to_email "Detected "$number_moved" files moved,"
      log_to_email "Which is greater than "$moved_threshold
      log_to_email "Maybe a Sync is not a good idea?..."

      # Send Notification Email and Exit
      send_email "SnapRAID-DAILY: MOVED Threshold Exceeded"

      # Delete the Logfiles and exit with Status 5 to flag the threshold has been exceeded
      clean_up_logfiles
      exit 5
    fi

  # If all of the above are equal to zero, then we know no changes have occured since the last sync
  elif [ $number_added -eq 0 ] && [ $number_removed -eq 0 ] && [ $number_updated -eq 0 ] && [ $number_moved -eq 0 ] && [ $number_copied -eq 0 ] && [ $number_restored -eq 0 ]
  then
    # Neither Threshold has been exceeded, but we still want
    # to continue if a sync is in progress, since the solution to
    # a sync being interrupted before it has finished is to
    # let it finish.
    if [ $found_unfinished_sync == 1 ] 
    then
      log_to_email_time "No Changes - Nothing to Sync"
      log_to_email_time "However a sync is still in progress - Continuing..."
      log_to_email ""

      # Specify a sync is required
      sync_required=1

    else
      log_to_email_time "No Changes - Nothing to Sync"
      log_to_email ""

      # No Sync Required
      sync_required=0

    fi

  else
    # Complete IF Statement - Exit if we get to here
    log_to_email_time "Problem with Diff Command - Exiting..."
    log_to_email_time "Diff Command Logfile Is attached..."
    send_email_with_log "SnapRAID-DAILY: DIFF Command Problem" $diff_command_logfile

    # Delete the logfiles and exit with Status 1 to Flag an Error
    clean_up_logfiles
    exit 1
  fi
}

# Sync Array Function
function sync_array {

  # Only Run if the previous snapraid diff check found changes
  if [ $sync_required -eq 1 ]
  then

    log_to_email "##############################"
    log_to_email "# SnapRAID-DAILY: Sync"
    log_to_email "##############################"

    # Find the Current Time to Get the Time the Sync was Started At
    sync_start_time=`date '+%Y-%m-%d_%H-%M-%S'`
    sync_start_seconds=$(date +%s)

    # Sync is required, proceed to sync the array
    log_to_email_time "Starting Sync on "$(date +%d/%m/%Y)"..."

    # Call snapraid sync command
    snapraid_sync_cmd

    # Find the current time to get the time the sync finished at
    sync_finish_time=`date '+%Y-%m-%d_%H-%M-%S'`
    sync_finish_seconds=$(date +%s)

    # Compute the Run-Time of the Sync Command for the Email
    sync_runtime=$((sync_finish_seconds-sync_start_seconds))
    sync_runtime_hours=$((sync_runtime / 3600))
    sync_runtime_minutes=$(( (sync_runtime % 3600) / 60 ))
    sync_runtime_seconds=$(( (sync_runtime % 3600) % 60 ))

    log_to_email_time "Sync Completed on "$(date +%d/%m/%Y)
    log_to_email_time "Duration: "$sync_runtime_hours" hours, "$sync_runtime_minutes "minutes, "$sync_runtime_seconds" seconds"

    # Analyze the output of The Sync Command to See if Files were modified during the
    # sync operation or not. This is useful as it is a common cause of the sync failing
    if grep -qw "WARNING! You cannot modify files during a sync." $sync_command_logfile 
    then
  
      # The above string was present in the output of the snapraid command.
      # this means we know the sync command was not successful, due to a file
      # being modified during the sync operation.
      log_to_email_time "Sync - File(s) Modified During Sync"
      log_to_email_time "Sync Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send the Notification Email and attach the output of the Sync Command
      send_email_with_log "SnapRAID-DAILY: File(s) Modified during Sync" $sync_command_logfile

      # Delete the Logfiles and exit with Status 3 to Highlight that a Modification Took Place in the
      # middle of the sync operation
      clean_up_logfiles
      exit 3

    # Otherwise check if the Sync was Successful or Not
    elif grep -qw "Everything OK" $sync_command_logfile  
    then
      # Print Out the Changes to Email Output
      log_to_email_time "Sync was Successful"
      log_to_email_time "Array Changes Found & Updated:"
      log_to_email "Added:" $number_added
      log_to_email "Removed:" $number_removed
      log_to_email "Updated:" $number_updated
      log_to_email "Moved:" $number_moved
      log_to_email "Copied:" $number_copied
      log_to_email "Restored:" $number_restored
      log_to_email ""

    # Otherwise check if nothing was found to sync. The difference check function
    # should ensure we don't get to this point though...
    elif grep -qw "Nothing to do" $sync_command_logfile  
    then
      # Print Out the Changes to Email Output
      log_to_email_time "Found nothing to Sync"
      log_to_email ""

    # Otherwise the sync was not successful. This means there were errors. This
    # could be a forced interruption or I/O errors etc. Exit and send warning
    # email.
    else
      log_to_email_time "Sync Encountered Issues - Please Investigate"
      log_to_email_time "Sync Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send the Notification Email and attach the output of the Sync Command
      send_email_with_log "SnapRAID-DAILY: Sync Warning(s)" $sync_command_logfile

      # Delete Logfiles and exit with Status 1 to Flag an Error
      clean_up_logfiles
      exit 1
    fi
  fi
}

# Scrub Array Function
function scrub_array {

  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Scrub"
  log_to_email "##############################"

  ###################################################
  # We need to check the array is up to date. It should be if a
  # sync was just ran, but if files were either removed or updated
  # in the period of time since the sync, this could cause
  # the scrub command to stop and report an unexpected file change
  # error. SnapRAID handles this gracefully, but to keep the email
  # output neat, this is a good idea.
  # If the system is left alone, it'll be synced as normal the next
  # time the script is ran.
  ###################################################
  log_to_email_time "Checking if Array is still up to date..."

  # Call snapraid diff command to see if the array is still up to date
  snapraid_diff_cmd

  # Analyze the Diff Logfile like before to see if there are Changes
  scrub_number_added=$( grep -w '^ \{1,\}[0-9]* added$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  scrub_number_removed=$( grep -w '^ \{1,\}[0-9]* removed$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  scrub_number_updated=$( grep -w '^ \{1,\}[0-9]* updated$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  scrub_number_moved=$( grep -w '^ \{1,\}[0-9]* moved$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  scrub_number_copied=$( grep -w '^ \{1,\}[0-9]* copied$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)
  scrub_number_restored=$( grep -w '^ \{1,\}[0-9]* restored$' $diff_logfile | sed 's/^ *//g' | cut -d ' ' -f1)

  # Check if We have no Moved, Removed or Updated Files. Added or Copied are OK
  # for the purposes of the scrub
  if [ $scrub_number_removed -eq 0 ] && [ $scrub_number_updated -eq 0 ] && [ $scrub_number_moved -eq 0 ]
  then
    # Array is still up to date - proceeding to scrub
    log_to_email_time "Array is Up-to-Date - Proceeding"

    # Find the Current Time to Get the Time the Sync was Started At
    scrub_start_time=`date '+%Y-%m-%d_%H-%M-%S'`
    scrub_start_seconds=$(date +%s)
    log_to_email_time "Starting Scrub on "$(date +%d/%m/%Y)
    log_to_email_time "Scrubbing" $scrub_percent"% older than" $scrub_age "days..."

    # Call Snapraid Scrub command
    snapraid_scrub_cmd

    # Find the current time to get the time the scrub finished at
    scrub_finish_time=`date '+%Y-%m-%d_%H-%M-%S'`
    scrub_finish_seconds=$(date +%s)

    # Compute the Run-Time of the Scrub Command for the Email
    scrub_runtime=$((scrub_finish_seconds-scrub_start_seconds))
    scrub_runtime_hours=$((scrub_runtime / 3600))
    scrub_runtime_minutes=$(( (scrub_runtime % 3600) / 60 ))
    scrub_runtime_seconds=$(( (scrub_runtime % 3600) % 60 ))

    log_to_email_time "Scrub Completed at "$(date +%d/%m/%Y)
    log_to_email_time "Duration: "$scrub_runtime_hours" hours, "$scrub_runtime_minutes "minutes, "$scrub_runtime_seconds" seconds"

    # Check for a successful scrub 
    if grep -qw "Everything OK" $scrub_logfile 
    then
      log_to_email_time "Scrub was successful"
      log_to_email_time "Scrubbed" $scrub_percent"% older than" $scrub_age "days"
      log_to_email ""

    # Otherwise check if nothing was found to scrub
    elif grep -qw "Nothing to do" $scrub_logfile 
    then
      # Nothing to scrub - Maybe there is nothing older than
      # the specified scrub age to scrub
      log_to_email_time "Found Nothing to Scrub"
      log_to_email ""

    # Otherwise the scrub happened but was not successful. Could be a forced
    # interruption or another error like I/O errors etc. Exit and send warning
    # email to user.
    else
      log_to_email_time "Scrub Encountered Issues - Please Investigate"
      log_to_email_time "Scrub Log is Attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send Email and Exit Script
      send_email_with_log "SnapRAID-DAILY: Scrub Warning(s)" $scrub_command_logfile

      # Delete the logfiles and exit with Status 1 to Flag an Error
      clean_up_logfiles
      exit 1
    fi
  else
    # Array is not up to date - Exit the Script if --scrub-only was given
    if [ $scrub_only -eq 1 ]
    then
      # Add Changes to Email
      log_to_email_time "Array not up-to-date - Sync Required 1st, Exiting..."
      log_to_email_time "Changes detected are:"
      log_to_email "Added:" $scrub_number_added
      log_to_email "Removed:" $scrub_number_removed
      log_to_email "Updated:" $scrub_number_updated
      log_to_email "Moved:" $scrub_number_moved
      log_to_email "Copied:" $scrub_number_copied
      log_to_email "Restored:" $scrub_number_restored
      log_to_email ""

      # Add Array Status to Email
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""

      # Call Snapraid Status to Put the Final Array Status into the Email
      snapraid_status_to_email

      # Send Email and Exit Script
      # Send the Notification Email and attach the output of the Sync Command
      send_email "SnapRAID-Scrub: Sync Required"

      # Delete the Logfiles and Exit with Status 1 to Flag an Error
      clean_up_logfiles
      exit 1

    else
      log_to_email_time "Array not up-to-date - Sync Required 1st..."
      log_to_email ""
    fi
  fi
}

# Send Final Email Log
function send_final_notification_email {

  echo "Sending Final Notification Email..."
  echo ""
  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Array Status"
  log_to_email "##############################"
  log_to_email_time "Current status of the Array is as below:"
  log_to_email ""

  # Call Snapraid Status to Put the Final Array Status into the Email
  snapraid_status_to_email

  # Send Final Notification Email if Script Ran all the way to the End,
  # also change the email subject depending on whether sync-only or
  # scrub-only was input by the user.
  if [ $sync_only -eq 1 ]
  then
    if [ $sync_required -eq 1 ]
    then
      send_email "SnapRAID-Sync: Success"
    else
      send_email "SnapRAID-Sync: Nothing to Sync"
    fi

  elif [ $scrub_only -eq 1 ]
  then
    # Refine Email subject if Nothing was found to scrub
    if [ ! -z "$scrub_no_need_check" ]
    then
      # Nothing was found to Scrub - Put this in the email title
      send_email "SnapRAID-Scrub: Nothing to Scrub"
    else
      # Otherwise, we know scrub ran as normal
      send_email "SnapRAID-Scrub: Success"
    fi

  else
    send_email "SnapRAID-DAILY: Success"
  fi
}

# Clean Up Log-Files Function
function clean_up_logfiles {

  # Delete all Logfiles Generated by the Script, with systemd logging and
  # the error logfiles sent via email, there is not much value in keeping them
  rm $status_logfile &> /dev/null
  rm $touch_logfile &> /dev/null
  rm $diff_logfile &> /dev/null
  rm $sync_logfile &> /dev/null
  rm $scrub_logfile &> /dev/null
  rm $scrub_diff_logfile &> /dev/null
  rm $email_body_logfile &> /dev/null
  rm $scrub_command_logfile &> /dev/null
  rm $sync_command_logfile &> /dev/null
  rm $touch_command_logfile &> /dev/null
  rm $diff_command_logfile &> /dev/null
}

# Functions to Send Emails without a Log (No Errors Encountered)
function send_email() {

  # Only attempt to send emails if a muttrc file path and
  # email address were defined in snapraid-daily.conf
  if [ $enable_emails == 1 ]
    then 
    # Only argument is the subject
    email_subject="${1}"
  
    # Call Mutt to Send the Email
    mutt -F $muttrc_path -s "${email_subject}" $email_address < $email_body_logfile
  
    # Check if the email is sent successfully for the systemd logs
    if [ $? -eq 0 ]
    then
      echo "Email Sent Successfully..."
      echo ""
    else
      echo "Problem Sending Email..."
      echo ""
    fi
  else
    echo "WARNING: Emails Disabled - Require mutt to be installed along with a muttrc_path" 
    echo "and email_address to be defined in snapraid-daily.conf"
  fi
}

# Functions to Send Emails with a Log (Errors Encountered)
function send_email_with_log() {

  # Only attempt to send emails if a muttrc file path and
  # an email address were defined in snapraid-daily.conf
  if [ $enable_emails == 1 ]
  then
    # Arguments are the subject and attachment 
    email_subject="${1}"
    email_attachment="${2}"
  
    # Call Mutt to Send the Email with the Attachment
    mutt -F $muttrc_path -s "${email_subject}" -a "${email_attachment}" -- $email_address < $email_body_logfile
  
    # Check if the email is sent successfully for the systemd logs
    if [ $? -eq 0 ]
    then
      echo ""
      echo "Email Sent Successfully..."
    else
      echo ""
      echo "Problem Sending Email..."
    fi
  else
    echo "WARNING: Emails Disabled - Require mutt to be installed along with a muttrc_path" 
    echo "and email_address to be defined in snapraid-daily.conf"
  fi
}

###################################################
# SCRIPT START
###################################################

# Parse Input Arguments to determine if sync only, scrub only
# or overriding the deletion/moved thresholds is desired
# by the user
parse_arguments "$@"

# Read Config File
read_config_file

# Sanity-Check to see if all checks are satisfied
sanity_check

# Generate Logfiles for Analysis
generate_logfiles

# Start Email log by printing the greeting specifying the
# start-time and the arguments specified.
print_greeting

# Check the intial status to see if touch is required,
# or if errors are present
initial_status_check

# Run Touch if it is required, check for deletion/moved thresholds
# and then sync the array. Only do this if the --scrub-only argument
# is not active
if [ $scrub_only -eq 0 ]
then
  # Run Touch if required
  run_touch_if_needed

  # Check Array for Changes & Deletion Thresholds
  check_array_for_changes_and_thresholds

  # Sync & Check the output for errors
  sync_array
fi

# Scrub & Check the output for errors if --sync-only
# argument is not active
if [ $sync_only -eq 0 ]
then
  scrub_array
fi

# Send Final Notification Email if No Errors were detected
send_final_notification_email

# Delete all Logfiles
clean_up_logfiles

# Exit with Status 0 to Flag Success if all Steps Completed
exit 0

