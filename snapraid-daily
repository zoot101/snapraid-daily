#!/usr/bin/env bash
###################################################
# SnapRAID DAILY
###################################################
# COPYRIGHT (C) Mark Finnan 2021
###################################################

# VERSION
version=1.3.5

###################################################
# RETURN CODES
###################################################
success_code=0                      # Success
error_code=1                        # All Errors
already_in_use_code=2               # SnapRAID Already in use
files_modified_during_sync_code=3   # Files Modified During Sync
thresholds_exceeded_code=5          # Deletion/Moved Thresholds exceeded

###################################################
# FUNCTIONS
###################################################
# Error Function for Errors that exit immediately
function error() {
  echo "ERROR:" "$@"
  echo ""
  exit $error_code
}

###################################################
# LOGGING FUNCTIONS
###################################################
# Log to Email with and without time 
function log_to_email() {
  echo "$@" | tee -a $email_body_logfile
}
function log_to_email_time() {
  echo $(date +%H:%M:%S) ":" "$@" | tee -a $email_body_logfile
}

# Generate the necessary logfiles in /tmp using mktemp
function generate_logfiles {
  # Do a quick cursory check to see if /tmp is writable
  if [ ! -w "/tmp/" ]; then
    error "/tmp directory is not writable - Exiting"
  fi

  # Tmp file Prefix - ".txt" added at the end for email attachments
  tmp_file_prefix="snapraid-daily.XXXXX.txt"

  # Generate Logfiles
  status_logfile=$( mktemp -t "${tmp_file_prefix}" )
  touch_logfile=$( mktemp -t "${tmp_file_prefix}" )
  diff_logfile=$( mktemp -t "${tmp_file_prefix}" )
  sync_logfile=$( mktemp -t "${tmp_file_prefix}" )
  scrub_logfile=$( mktemp -t "${tmp_file_prefix}" )
  scrub_diff_logfile=$( mktemp -t "${tmp_file_prefix}" )
  email_body_logfile=$( mktemp -t "${tmp_file_prefix}" )

  # Command Output Logfiles
  status_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  scrub_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  sync_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  touch_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
  diff_command_logfile=$( mktemp -t "${tmp_file_prefix}" )
}

##################################################
# SNAPRAID COMMANDS
##################################################
function snapraid_status_cmd() {
  # Call Snapraid Status using the "-l" option
  snapraid -c "$snapraid_config_file_path" -l "${status_command_logfile}" -qq status | tee $status_logfile
}

function snapraid_status_to_email() {
  # Call Snapraid status and pipe the output into the email
  snapraid -c "$snapraid_config_file_path" -qq status | tee -a $email_body_logfile
}

function snapraid_touch_cmd() {
  # Specify SnapRAID Touch arguments
  snapraid_touch_args=( -c "$snapraid_config_file_path" -v -l $touch_command_logfile )

  # Call snapraid touch to update timestamps. Suppress all output if --quiet option is set
  if [ $quiet_option == 1 ]; then
    snapraid_touch_args=$( "${snapraid_touch_args[@]}" -qqqq )
  fi

  # Call SnapRAID Touch
  snapraid "${snapraid_touch_args[@]}" touch | tee $touch_logfile
}

function snapraid_diff_cmd() {
  # Define snapraid diff arguments
  snapraid_diff_args=( -c "$snapraid_config_file_path" -v -l $diff_command_logfile ) 

  # Call snapraid diff - Suppress all output if the -q, --quiet option is set
  if [ $quiet_option == 1 ]; then
    snapraid_diff_args=( "${snapraid_diff_args[@]}" -qqqq)
  fi

  # Call SnapRAID diff
  snapraid "${snapraid_diff_args[@]}" diff | tee $diff_logfile

  # Get the numbers and exit status from analyzing the command logfile
  number_equal=$( grep -w "^summary:equal" $diff_command_logfile | awk -F ":" '{print $3}')
  number_added=$( grep -w "^summary:added" $diff_command_logfile | awk -F ":" '{print $3}') 
  number_removed=$( grep -w "^summary:removed" $diff_command_logfile | awk -F ":" '{print $3}')
  number_updated=$( grep -w "^summary:updated" $diff_command_logfile | awk -F ":" '{print $3}')
  number_moved=$( grep -w "^summary:moved" $diff_command_logfile | awk -F ":" '{print $3}')
  number_copied=$( grep -w "^summary:copied" $diff_command_logfile | awk -F ":" '{print $3}')
  number_restored=$( grep -w "^summary:restored" $diff_command_logfile | awk -F ":" '{print $3}')
  diff_exit_status=$( grep -w "^summary:exit" $diff_command_logfile | awk -F ":" '{print $3}')

  # Check if any of the above are undefined, or if the exit status is not
  # "equal" or "diff" as this indicates something unexpected with the diff command
  if [ -z $number_equal ] || [ -z $number_added ] || [ -z $number_removed ] || \
     [ -z $number_updated ] || [ -z $number_moved ] || [ -z $number_copied ] || \
     [ -z $number_copied ] || [ -z $number_restored ] || [ -z "${diff_exit_status}" ]
  then
    log_to_email_time "Problem with Diff Command - Stopping"
    log_to_email_time "Diff Command Logfile Is attached..."
    send_email_with_log "SnapRAID-DAILY: Diff Warning(s)" $diff_command_logfile
    clean_up_logfiles
    exit $error_code

  elif [ "${diff_exit_status}" != "diff" ] && [ "${diff_exit_status}" != "equal" ]
  then
    log_to_email_time "Unexpected Exit Status for Diff - Stopping"
    log_to_email_time "It should be either \"diff\" or \"equal\""
    log_to_email_time "Diff Command Logfile Is attached..."
    send_email_with_log "SnapRAID-DAILY: Diff Warning(s)" $diff_command_logfile
    clean_up_logfiles
    exit $error_code
  fi    
}

function snapraid_sync_cmd() {
  # Define snapraid sync arguments
  snapraid_sync_args=( -c "$snapraid_config_file_path" -v -l $sync_command_logfile -h)

  # Check for force_zero, force_empty, or force_uuid inputs
  if [ "${force_zero}" == "yes" ]; then
    snapraid_sync_args=( "${snapraid_sync_args[@]}" --force-zero )
    log_to_email_time "SYNC WARNING: --force-zero is enabled."
  fi 
  if [ "${force_empty}" == "yes" ]; then
    snapraid_sync_args=( "${snapraid_sync_args[@]}" --force-empty )
    log_to_email_time "SYNC WARNING: --force-empty is enabled."
  fi
  if [ "${force_uuid}" == "yes" ]; then
    snapraid_sync_args=( "${snapraid_sync_args[@]}" --force-uuid )
    log_to_email_time "SYNC WARNING: --force-uuid is enabled."
  fi
 
  # Suppress all output if the -q, --quiet option is set
  if [ $quiet_option == 1 ]; then
    snapraid_sync_args=( "${snapraid_sync_args[@]}" -qqqq )
  fi

  # Call SnapRAID Sync
  snapraid "${snapraid_sync_args[@]}" sync | tee $sync_logfile
}

function snapraid_scrub_cmd() {
  # Define snapraid scrub arguments
  snapraid_scrub_args=( -c "$snapraid_config_file_path" -v -p $scrub_percent -o $scrub_age -l $scrub_command_logfile ) 
 
  # Call Scrub Command with parameters from config file. Suppress all output --quiet option is selected.
  if [ $quiet_option == 1 ]; then
    snapraid_scrub_args=( "${snapraid_scrub_args[@]}" -qqqq )
  fi

  # Call SnapRAID Scrub
  snapraid "${snapraid_scrub_args[@]}" scrub | tee -a $scrub_logfile
}

##################################################
# OTHER FUNCTIONS
##################################################

# Read Config File parameters in. If it is not present, exit
function read_config_file {

  # Find script source directory. NOTE: this fails if the script is called
  # using a symbolic link - will fix
  source_directory=$(dirname "$BASH_SOURCE")

  # Configuration Files are read in the following order of preference
  # Exit if none of the below are found
  # 1 - Custom Config file if specified by the -f or --config options
  # 2 - /etc/snapraid-daily.conf
  # 3 - Same directory as script
  config_file0="${custom_config_file}"
  config_file1="/etc/snapraid-daily.conf"
  config_file2="${source_directory}""/snapraid-daily.conf"

  if [ -r "${config_file0}" ]
  then
    echo "Using Config File:" "${config_file0}"
    source "${config_file0}"
  elif [ -r "${config_file1}" ]
  then
    echo "Using Config File:" "${config_file1}"
    source "${config_file1}"
  elif [ -r "${config_file2}" ]
  then
    echo "Using Config File:" "${config_file2}"
    source "${config_file2}"
  else
    echo "WARNING: No config file found in any of the following locations:"
    echo "1. Specified with the -f or --config option"
    echo "2: /etc/snapraid-daily.conf"
    echo "3: snapraid-daily.conf in script directory:" "${source_directory}"
    echo ""
    echo "All Defaults will be used"
    echo "See the manual entry for snapraid-daily.conf(1)"
    echo ""
  fi

  # Check if all of the parameters are defined correctly within the config file
  # If any are undefined, set defaults

  # Snapraid Config File Path
  if [ -z "$snapraid_config_file_path" ]
  then
    if [ ! -r "/etc/snapraid.conf" ]
    then
      error "snapraid_config_file_path missing in snapraid-daily.conf and /etc/snapraid.conf not found - Exiting"
    else
      echo "WARNING: snapraid_config_file_path not defined in snapraid-daily.conf - Using /etc/snapraid.conf"
      snapraid_config_file_path="/etc/snapraid.conf"
    fi
  fi

  # Check for a Valid muttrc file. If not found, disable the email functionality
  if [ ! -r "$muttrc_path" ]
  then
    echo "WARNING: muttrc_path missing in snapraid-daily.conf, not found or not readable - No Emails will be sent"
    enable_emails=0
  else
    # Otherwise - Check an email address was defined in snapraid-daily.conf
    if [ -z "$email_address" ]
    then
      echo "WARNING: email_address missing from snapraid-daily.conf - No Emails will be sent"
      enable_emails=0
    else
      enable_emails=1
    fi
  fi

  # Check for the Deletion/Moved Thresholds and sanity check they're not less than one
  if [ -z $deletion_threshold ]
  then
    echo "WARNING: deletion_threshold not defined in snapraid-daily.conf - Using 100 by default"
    deletion_threshold=100
  else
    if [ $deletion_threshold -lt 1 ]
    then
      error "deletion_threshold can't be set to less than 1 - To disable deletion/moved thresholds use the -o argument."
    fi
  fi
  if [ -z $moved_threshold ]
  then
    echo "WARNING: moved_threshold not defined in snapraid-daily.conf - Using 100 by default"
    moved_threshold=100
  else
    if [ $moved_threshold -lt 1 ]
    then
      error "moved_threshold can't be set to less than one - To disable deletion/moved thresholds use the -o argument."
    fi
  fi

  # Check for a Scrub Percent. default to 8%, sanity check its between 0 and 100
  if [ -z $scrub_percent ]
  then
    echo "WARNING: scrub_percent is not defined snapraid-daily.conf - Using 8%"
    scrub_percent=8
  else
    if [ $scrub_percent -gt 100 ] || [ $scrub_percent -le 0 ]
    then
      error "scrub_percent should be a number greater than 0 & less than 100 - Exiting"
    fi
  fi

  # Check for a Scrub Age, default to 21 days, sanity check its not negative
  if [ -z $scrub_age ]
  then
    echo "WARNING: scrub_age is not defined in snapraid-daily.conf - Using 21 days"
    scrub_age=21
  else
    if [ $scrub_age -lt 0 ]
    then
      error "scrub_age cannot be a negative number - Exiting"
    fi
  fi

  # Check for disable_emails_on_success, default to no. Sanity check it's "yes" or "no"
  if [ ! -z "${disable_emails_on_success}" ]
  then
    if [ "${disable_emails_on_success}" != "yes" ] && [ "${disable_emails_on_success}" != "no" ]
    then
      error "Specified invalid disable_emails_on_success in config - It should be either \"yes\" or \"no\""
    else
      echo "INFO: Notification Emails disabled on Success"
    fi
  else
    disable_emails_on_success="no"
  fi

  # Check for the Extra (Not Recommended) Options to Force Syncs are defined,
  # force_zero, force_empty, force_uuid
  if [ ! -z "${force_zero}" ];  then
    if [ "${force_zero}" != "yes" ] && [ "${force_zero}" != "no" ]
    then
      error "Specified invalid force_zero in config - It should be either \"yes\" or \"no\""
    fi
  fi
  if [ ! -z "${force_empty}" ]; then
    if [ "${force_empty}" != "yes" ] && [ "${force_empty}" != "no" ]
    then
      error "Specified invalid force_empty in config file - It should be either \"yes\" or \"no\""
    fi
  fi
  if [ ! -z "${force_uuid}" ]; then
    if [ "${force_uuid}" != "yes" ] && [ "${force_uuid}" != "no" ]
    then
      error "Specified invalid force_uuid in config file - It should be either \"yes\" or \"no\""
    fi
  fi
}

# Sanity Check for Dependencies
function sanity_check {
  # Check if Snapraid is Installed
  if [ -z $(which snapraid) ]; then
    error "SnapRAID is not installed - Exiting..."

  # Check if grep is Installed
  elif [ -z $(which grep) ]; then
    error "grep is not installed - Exiting..."

  # Check tee is installed
  elif [ -z $(which tee) ]; then
    error "tee is not installed - Exiting..."

  # Check if awk is Installed
  elif [ -z $(which awk) ]; then
    error "awk is not installed - Exiting..."

  # Check if sed is Installed
  elif [ -z $(which sed) ]; then
    error "sed is not installed - Exiting..."

  # Check if mktemp is Installed
  elif [ -z $(which mktemp) ]; then
    error "mktemp is not installed - Exiting..."

  # Check for the SnapRAID Config File
  elif [ ! -r "$snapraid_config_file_path" ]; then
    error "Snapraid Config File does not exist or is not readable - Exiting..."

  else
    # Find 1st Content File Location
    content_file=$(cat "$snapraid_config_file_path" | grep -w "^content" | sed -n 1p | sed 's/^[^\/]*\//\//' ) 
    if [ ! -w "${content_file}" ]; then
      error "1st defined SnapRAID Content File in" "${snapraid_config_file_path}" "does not exist or is not writable"
    fi
  fi

  # Check if Mutt is Installed, otherwise disable emails
  if [ -z $(which mutt) ]; then
    echo "WARNING: Mutt is not installed - No emails will be sent"
    enable_emails=0
  fi
  echo ""
}

# Print a condensed help message for a quick start
function print_help {
  echo ""
  echo "Usage: snapraid-daily         [OPTIONS...]"
  echo ""
  echo "  -s, --sync-only             Only Sync the Array - Do not run Scrub"
  echo "  -c, --scrub-only            Only Scrub the Array - Do not run Sync"
  echo "                              Note that if both of these options are omitted, the"
  echo "                              default is to run sync and then scrub. They also can"
  echo "                              not be specified at the same time"
  echo "  -o, --override-thresholds   Ignore the deletion/moved thresholds to force a sync"
  echo "  -f, --config [path-to-conf] Override default config file. Could be useful if one"
  echo "                              has multiple snapraid arrays to manage on the same system"
  echo "  -q, --quiet                 Suppress the output of the touch, diff, sync and scrub"
  echo "                              commands for snapraid. The final status message is still"
  echo "                              displayed as normal."
  echo "  -h, --help                  Print help"
  echo ""
  echo "Manual Entries:"
  echo "  Main Script:                snapraid-daily(1)      $ man snapraid-daily"
  echo "  Config File:                snapraid-daily.conf(1) $ man snapraid-daily.conf"
  echo ""
  exit $success_code
}

# Function to Parse Input Arguments to the Script
function parse_arguments() {

  # Valid arguments are:
  # -o, --override-thresholds : Ignore Deletion/Moved Thresholds
  # -s, --sync-only           : Only Run Sync
  # -c, --scrub-only          : Only Run Scrub
  # -f, --config              : Override default config file
  # -q, --quiet               : Suppress output of touch/diff/sync/scrub
  # -h, --help                : Print Help and Exit
 
  while (( ${#} ))
  do
    # Check for Valid Arguments
    case "${1}" in

      # Check for Sync Only
      -s|--sync-only)
      sync_only=1
      ;;

      # Check for Scrub Only
      -c|--scrub-only)
      scrub_only=1
      ;;

      # Check for Override Thresholds
      -o|--override-thresholds)
      override_thresholds=1
      ;;

      # Check for Quiet Option
      -q|--quiet)
      quiet_option=1
      ;;

      # Check if the default config is overriden
      -f|--config)
      shift 1
      if [ ! -f "${1}" ]; then
        echo "Specified custom config file, but given file does not exist - Exiting"
        echo ""
        print_help
      else
        custom_config_file="${1}"
      fi
      ;;

      # Check for Help
      -h|--help)
      print_help
      ;;

      # Check for an Unrecognised Argument
      *)
      echo "Invalid Input Argument:" "${1}"
      echo ""
      print_help
      ;;
    esac
    shift 1
  done

  # Check if any of the above argument variables were not defined and 
  # set them to their default values
  if [ -z $sync_only ]; then sync_only=0; fi
  if [ -z $scrub_only ]; then scrub_only=0; fi
  if [ -z $override_thresholds ]; then override_thresholds=0; fi
  if [ -z $quiet_option ]; then quiet_option=0; fi

  # Check if --sync-only and --scrub-only were specified at the same time - Exit if so
  if [ $sync_only == 1 ] && [ $scrub_only == 1 ]
  then
    echo "-s|--sync-only & -c|--scrub-only arguments can't both be specified at the same time - Exiting"
    echo ""
    print_help
    exit $error_code
  fi

  # Check if --override-thresholds and --scrub-only were specified at the same - Warn if so
  if [ $scrub_only == 1 ] && [ $override_thresholds == 1 ]
  then
    echo "WARNING: -o|--override-thresholds has no effect when using -c|--scrub-only"
  fi
}

# Print Greeting in Email Log
function print_greeting {
  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY Version:" "${version}"
  log_to_email "##############################"
  log_to_email "Initialized at "$(date +%H:%M:%S)" on "$(date +%d/%m/%Y)
  log_to_email "Input Options:"

  # Print Input Options based upon input arguments and config file 
  if [ $sync_only -eq 1 ]; then
    log_to_email "Run-Sync: YES"
    log_to_email "Run-Scrub: NO"
  fi
  if [ $scrub_only -eq 1 ]; then
    log_to_email "Run-Sync: NO"
    log_to_email "Run-Scrub: YES"
    log_to_email "Scrub-Percent:" $scrub_percent
    log_to_email "Scrub-Age:" $scrub_age "days"
  fi

  # Check for the default condition where a sync and scrub are ran
  if [ $sync_only -eq 0 ] && [ $scrub_only -eq 0 ]; then
    log_to_email "Run-Sync: YES"
    log_to_email "Run-Scrub: YES"
    log_to_email "Scrub-Percent:" $scrub_percent
    log_to_email "Scrub-Age:" $scrub_age "days"
  fi

  # Check if the Override Thresholds has been specified
  if [ $override_thresholds -eq 1 ]; then
    log_to_email "Override Deletion/Moved Thresholds: YES"
  else
    log_to_email "Override Deletion/Moved Thresholds: NO"
  fi
  log_to_email "Deletion Threshold:" $deletion_threshold
  log_to_email "Moved Threshold:" $moved_threshold

  # Check for Extra Non-Recommended Parameters for the Sync
  if [ "${force_zero}" == "yes" ]; then 
    log_to_email "Force Sync on Zero Size: YES"
  fi 
  if [ "${force_empty}" == "yes" ]; then
    log_to_email "Force Sync on Empty: YES"
  fi
  if [ "${force_uuid}" == "yes" ]; then
    log_to_email "Force Sync on UUID Change: YES"
  fi 
  log_to_email "Run-Log is Below:"
  log_to_email ""
}

# Inital Check - Do an initial check of the array check for errors/sync in progress etc.
function initial_status_check {
  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Initial Status Check"
  log_to_email "##############################"
  log_to_email_time "Checking current status..."

  # Call snapraid status
  snapraid_status_cmd

  # Error Checks - Not 100% Sure about this yet. Old method may be better - see below
  bad_check0=$(grep -w "^summary:has_bad" "${status_command_logfile}" | awk -F ":" '{print $3}')
  bad_check1=$(grep -w "^summary:has_bad" "${status_command_logfile}" | awk -F ":" '{print $4}')
  bad_check2=$(grep -w "^summary:has_bad" "${status_command_logfile}" | awk -F ":" '{print $5}')

  # Re-Hash Check and Unsynced Check
  rehash_check=$(grep -w "^summary:has_rehash" "${status_command_logfile}" | awk -F ":" '{print $3}')
  unsynced_check=$(grep -w "^summary:has_unsynced" "${status_command_logfile}" | awk -F ":" '{print $3}')

  # Number of Files requiring touch - if any
  touch_required_count=$(grep -w "^summary:zerosubsecond_file_count" "${status_command_logfile}" | awk -F ":" '{print $3}')

  # Scenario 1 - Check if Snapraid is Already in Use - Exit if so
  if grep -qw "SnapRAID is already in use!" "${status_command_logfile}"
  then
    log_to_email_time "SnapRAID is already Use - Exiting..."
    log_to_email ""
    send_email "SnapRAID-DAILY: SnapRAID In Use!"
    clean_up_logfiles
    exit $already_in_use_code
  
  # Scenario 2 - Check if the important parameters above are not defined
  elif [ -z $rehash_check ] || [ -z $unsynced_check ] || [ -z $bad_check0 ] || \
       [ -z $bad_check1 ] || [ -z $bad_check2 ]
  then
    log_to_email_time "Unexpected Status Output - Exiting..."
    log_to_email_time "Status Logfile is attached"
    log_to_email_time "Current Status of the Array is as below:"
    log_to_email ""
    snapraid_status_to_email
    send_email_with_log "SnapRAID-Daily: Initial Error(s) Present" "${status_command_logfile}"
    clean_up_logfiles
    exit $error_code

  # Scenario 3 - Check for errors - Exit if present (Old Method Commented Out) 
  elif [ $bad_check0 != 0 ] || [ $bad_check1 != 0 ] || [ $bad_check2 != 0 ]
  #elif ! grep -qw "No error detected." $status_logfile
  then
    log_to_email_time "Found error(s) - Exiting..."
    log_to_email_time "Status Logfile is attached"
    log_to_email_time "Current Status of the Array is as below:"
    log_to_email ""
    snapraid_status_to_email
    send_email_with_log "SnapRAID-DAILY: Inital Error(s) Present" "${status_command_logfile}"
    clean_up_logfiles
    exit $error_code

  # Scenario 4 - Check if a ReHash is needed.
  elif [ $rehash_check != 0 ] 
  then
    log_to_email_time "Rehash In-Progress/Required - Exiting..."
    log_to_email_time "Status Logfile is attached"
    log_to_email_time "Current Status of the Array is as below:"
    log_to_email ""
    snapraid_status_to_email
    send_email_with_log "SnapRAID-DAILY: Re-Hash Warning" "${status_command_logfile}"
    clean_up_logfiles
    exit $error_code

  # Scenario 5 - Check if a Sync was previously stopped while in progress
  elif [ $unsynced_check != 0 ] 
  then
    # Don't exit the if a sync is in progress - continue to sync
    found_unfinished_sync=1

    # Although, if scrub-only is selected, exit and notify the user via email
    if [ $scrub_only -eq 0 ]
    then
      log_to_email_time "Sync Already in Progress - Continuing..."
    else
      log_to_email_time "Sync Already in Progress but Scrub-Only is selected"
      log_to_email_time "Cannot Scrub unless sync is finished - Exiting..."
      log_to_email_time "Current Status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email "SnapRAID-DAILY: Sync In Progress"
      clean_up_logfiles
      exit $error_code
    fi

  # Scenario 5 - None of the above checks found anything - Continue to Sync/Scrub
  else
    found_unfinished_sync=0
    log_to_email_time "No Issues Found in Initial Check"
  fi

  # Check if Touch is Needed and if Scrub Only is Not Selected
  if [ $scrub_only -eq 0 ] && [ $touch_required_count != 0 ] 
  then
    log_to_email_time "Touch Required on" $touch_required_count "files..."
    touch_required=1
  else
    log_to_email_time "Touch Not Needed..."
    touch_required=0
  fi
  log_to_email ""
}

# Touch Function - Run touch if required (and scrub only is not selected)
function run_touch_if_needed {
  if [ $touch_required -eq 1 ]
  then
    log_to_email "##############################"
    log_to_email "# SnapRAID-DAILY: Touch"
    log_to_email "##############################"
    log_to_email_time "Starting Touch..."

    # Call Snapraid touch command
    snapraid_touch_cmd

    # Check Touch Output for Errors - Do a search for "fatal" messages
    # (Not sure if there's a better way of doing this)...
    if grep -qw "^msg:fatal" "${touch_command_logfile}"
    then
      log_to_email_time "Touch Encountered Issues - Please Investigate..."
      log_to_email_time "Current Status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: Touch Warning(s)" "${touch_command_logfile}"
      clean_up_logfiles
      exit $error_code
    else
      log_to_email_time "Touch Completed"
      log_to_email ""
    fi
  fi
}

# Check for Changes, Deletion Threshold & Move Threshold
function check_array_for_changes_and_thresholds {
  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Difference Check"
  log_to_email "##############################"
  log_to_email_time "Checking array for changes..."

  # Call snapraid diff command
  snapraid_diff_cmd

  # Check the Exit Status of the Diff Command to see if a sync is required or not
  if [ "${diff_exit_status}" == "diff" ] 
  then
    # Specify a Sync is Required
    sync_required=1
    log_to_email_time "Changes Detected"
    log_to_email "Equal:" $number_equal
    log_to_email "Added:" $number_added
    log_to_email "Removed:" $number_removed
    log_to_email "Updated:" $number_updated
    log_to_email "Moved:" $number_moved
    log_to_email "Copied:" $number_copied
    log_to_email "Restored:" $number_restored

    # Check For Deletion/Moved Thresholds
    if [ $override_thresholds -eq 1 ]
    then
      log_to_email_time "Override Deletion/Moved Thresholds selected"
      log_to_email_time "Proceeding to sync regardless..."

    # Check For Deletion Threshold AND Moved Threshold both being exceeded
    elif [ $number_removed -gt $deletion_threshold ] && [ $number_moved -gt $moved_threshold ] && [ $override_thresholds -eq 0 ]
    then
      log_to_email ""
      log_to_email_time "Deletion AND Moved Threshold Exceeded"
      log_to_email "Deleted: "$number_removed
      log_to_email "Moved: "$number_moved
      log_to_email "Deletion Threshold:" $deletion_threshold
      log_to_email "Moved Threshold:" $moved_threshold
      log_to_email "Maybe a Sync is not a good idea?..."
      log_to_email_time "Stopping..."

      # Send Notification Email and Exit
      send_email "SnapRAID-DAILY: BOTH Thresholds Exceeded"
      clean_up_logfiles
      exit $thresholds_exceeded_code

    # Check for Deletion Threshold
    elif [ $number_removed -gt $deletion_threshold ] && [ $override_thresholds -eq 0 ]
    then
      log_to_email ""
      log_to_email_time "Deletion Threshold Exceeded"
      log_to_email "Deleted:" $number_removed
      log_to_email "Deletion Threshold:" $deletion_threshold
      log_to_email "Maybe a Sync is not a good idea?..."
      log_to_email_time "Stopping..."

      # Send Notification Email and Exit
      send_email "SnapRAID-DAILY: Deletion Threshold Exceeded"
      clean_up_logfiles
      exit $thresholds_exceeded_code

    # Check for Moved Threshold
    elif [ $number_moved -gt $moved_threshold ] && [ $override_thresholds -eq 0 ]
    then
      log_to_email ""
      log_to_email_time "Moved Threshold Exceeded"
      log_to_email "Moved:" $number_moved
      log_to_email "Moved Threshold:" $moved_threshold
      log_to_email "Maybe a Sync is not a good idea?..."
      log_to_email_time "Stopping..."

      # Send Notification Email and Exit
      send_email "SnapRAID-DAILY: Moved Threshold Exceeded"
      clean_up_logfiles
      exit $thresholds_exceeded_code
    fi
    log_to_email ""

  # If the exit status of the diff command is "equal", there are no changes
  elif [ "${diff_exit_status}" == "equal" ]
  then
    # No new changes, but want to complete sync if a sync is in progress
    if [ $found_unfinished_sync == 1 ] 
    then
      log_to_email_time "No Changes - Nothing to Sync"
      log_to_email_time "However a sync is still in progress - Continuing..."
      log_to_email ""
      sync_required=1
    else
      log_to_email_time "No Changes - Nothing to Sync"
      log_to_email ""
      sync_required=0
    fi
  fi
}

# Sync Array Function
function sync_array {
  # Only Run if the previous snapraid diff check found changes
  if [ $sync_required -eq 1 ]
  then
    log_to_email "##############################"
    log_to_email "# SnapRAID-DAILY: Sync"
    log_to_email "##############################"

    # Find the Current Time to Get the Time the Sync was Started At
    sync_start_time=`date '+%Y-%m-%d_%H-%M-%S'`
    sync_start_seconds=$(date +%s)
    log_to_email_time "Starting Sync on "$(date +%d/%m/%Y)"..."

    # Call snapraid sync command
    snapraid_sync_cmd

    # Compute the Run-Time of the Sync Command for the Email
    sync_finish_time=`date '+%Y-%m-%d_%H-%M-%S'`
    sync_finish_seconds=$(date +%s)
    sync_runtime=$((sync_finish_seconds-sync_start_seconds))
    sync_runtime_hours=$((sync_runtime / 3600))
    sync_runtime_minutes=$(( (sync_runtime % 3600) / 60 ))
    sync_runtime_seconds=$(( (sync_runtime % 3600) % 60 ))
    log_to_email_time "Sync Completed on "$(date +%d/%m/%Y)
    log_to_email_time "Duration: "$sync_runtime_hours" hours, "$sync_runtime_minutes "minutes, "$sync_runtime_seconds" seconds"

    # Get Error counts and Exit status from Sync Command Logfile
    # summary:error_file:0 summary:error_io:0 summary:error_data:0 summary:exit:ok
    io_errors=$(grep -w "^summary:error_io" "${sync_command_logfile}" | awk -F ":" '{print $3}')
    data_errors=$(grep -w "^summary:error_data" "${sync_command_logfile}" | awk -F ":" '{print $3}')
    file_errors=$(grep -w "^summary:error_file" "${sync_command_logfile}" | awk -F ":" '{print $3}')

    # For Sync there are two exit statuses printed to the logfile - for the diff and sync operations
    diff_exit_status=$(grep -w "^summary:exit" "${sync_command_logfile}" | sed -n 1p | awk -F ":" '{print $3}')
    sync_exit_status=$(grep -w "^summary:exit" "${sync_command_logfile}" | sed -n 2p | awk -F ":" '{print $3}')

    # Check to see if Files were modified during the sync - Exit if so
    if grep -qw "WARNING! You cannot modify files during a sync." $sync_command_logfile 
    then 
      log_to_email_time "Sync - File(s) Modified During Sync"
      log_to_email_time "Sync Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: File(s) Modified during Sync" $sync_command_logfile
      clean_up_logfiles
      exit $files_modified_during_sync_code

    # 1: Check if any of the above error counts the exit statuses are undefined - exit if so
    elif [ -z "$io_errors" ] || [ -z "$data_errors" ] || [ -z "$file_errors" ] || [ -z "${diff_exit_status}" ] || [ -z "${sync_exit_status}" ]
    then
      log_to_email_time "Sync Encountered Issues - Please Investigate"
      log_to_email_time "Sync Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: Sync Warning(s)" $sync_command_logfile
      clean_up_logfiles
      exit $error_code

    # 2: Exit if any of the number of errors above are non-zero or if the exit status is unexpected
    elif [ $io_errors != 0 ] || [ $data_errors != 0 ] || [ $file_errors != 0 ] || [ "${sync_exit_status}" != "ok" ]
    then
      log_to_email_time "Sync Log Reports Error(s) - Please Investigate"
      log_to_email_time "I/O Errors:" $io_errors
      log_to_email_time "Data Errors:" $data_errors
      log_to_email_time "File Errors:" $file_errors
      log_to_email_time "Exit Status:" "${sync_exit_status}"
      log_to_email_time "Sync Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: Sync Warning(s)" $sync_command_logfile
      clean_up_logfiles
      exit $error_code

    # 3: Sync Diff exit status reported no changes. Should be impossible to get to here though
    # since sync is not called if changes are found
    elif [ "${diff_exit_status}" == "equal" ]
    then
      log_to_email_time "Found nothing to sync"
      log_to_email ""

    # Otherwise if none of the above checks found anything - The sync was successful
    else
      # Print Out the Changes to Email Output
      log_to_email_time "Sync was Successful"
      log_to_email_time "Array Changes Found & Updated:"
      log_to_email "Added:" $number_added
      log_to_email "Removed:" $number_removed
      log_to_email "Updated:" $number_updated
      log_to_email "Moved:" $number_moved
      log_to_email "Copied:" $number_copied
      log_to_email "Restored:" $number_restored
      log_to_email ""
    fi
  fi
}

# Scrub Array Function
function scrub_array {
  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Scrub"
  log_to_email "##############################"

  # Need to check the array is up to date. More relevant if --scrub-only is selected
  log_to_email_time "Checking if Array is still up to date..."

  # Call snapraid diff command to see if the array is still up to date
  snapraid_diff_cmd

  # Check if We have no Moved, Removed or Updated Files. Added or Copied are OK for scrubbing
  if [ $number_removed -eq 0 ] && [ $number_updated -eq 0 ] && [ $number_moved -eq 0 ]
  then
    # Array is still up to date - proceeding to scrub
    log_to_email_time "Array is Up-to-Date - Proceeding"

    # Find the Current Time to Get the Time the Sync was Started At
    scrub_start_time=`date '+%Y-%m-%d_%H-%M-%S'`
    scrub_start_seconds=$(date +%s)
    log_to_email_time "Starting Scrub on "$(date +%d/%m/%Y)
    log_to_email_time "Scrubbing" $scrub_percent"% older than" $scrub_age "days..."

    # Call Snapraid Scrub command
    snapraid_scrub_cmd

    # Compute the Run-Time of the Scrub Command
    scrub_finish_time=`date '+%Y-%m-%d_%H-%M-%S'`
    scrub_finish_seconds=$(date +%s)
    scrub_runtime=$((scrub_finish_seconds-scrub_start_seconds))
    scrub_runtime_hours=$((scrub_runtime / 3600))
    scrub_runtime_minutes=$(( (scrub_runtime % 3600) / 60 ))
    scrub_runtime_seconds=$(( (scrub_runtime % 3600) % 60 ))
    log_to_email_time "Scrub Completed at "$(date +%d/%m/%Y)
    log_to_email_time "Duration: "$scrub_runtime_hours" hours, "$scrub_runtime_minutes "minutes, "$scrub_runtime_seconds" seconds"

    # Check Scrub Command Logfile for Errors
    # summary:error_file:0 summary:error_io:0 summary:error_data:0 summary:exit:ok
    scrub_io_errors=$(grep -w "^summary:error_io" "${scrub_command_logfile}" | awk -F ":" '{print $3}')
    scrub_data_errors=$(grep -w "^summary:error_data" "${scrub_command_logfile}" | awk -F ":" '{print $3}')
    scrub_file_errors=$(grep -w "^summary:error_file" "${scrub_command_logfile}" | awk -F ":" '{print $3}')
    scrub_exit_status=$(grep -w "^summary:exit" "${scrub_command_logfile}" | awk -F ":" '{print $3}')

    # Check if Nothing was found to scrub
    if grep -qw "Nothing to do" "${scrub_command_logfile}"
    then
      log_to_email_time "Found Nothing to Scrub"
      log_to_email ""
      nothing_to_scrub=1

    # 1: Check if any of the above error counts or exit status are undefined
    # Exit if this is the case - Print a generic message in the email
    elif [ -z $scrub_io_errors ] || [ -z $scrub_data_errors ] || [ -z $scrub_file_errors ] || [ -z "${scrub_exit_status}" ]
    then
      log_to_email_time "Scrub Encountered Issues - Please Investigate"
      log_to_email_time "Scrub Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: Scrub Warning(s)" "${scrub_command_logfile}"
      clean_up_logfiles
      exit $error_code

    # 2: Check if any of the number of errors in the counts above are non-zero
    elif [ $scrub_io_errors != 0 ] || [ $scrub_data_errors != 0 ] || [ $scrub_file_errors != 0 ] || [ "${scrub_exit_status}" != "ok" ]
    then
      log_to_email_time "Scrub Log Reports Error(s) - Please Investigate"
      log_to_email_time "I/O Errors:" $scrub_io_errors
      log_to_email_time "Data Errors:" $scrub_data_errors
      log_to_email_time "File Errors:" $scrub_file_errors
      log_to_email_time "Exit Status:" "${scrub_exit_status}"
      log_to_email_time "Scrub Output Log is attached..."
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email_with_log "SnapRAID-DAILY: Scrub Warning(s)" "${scrub_command_logfile}"
      clean_up_logfiles
      exit $error_code

    # Otherwise the scrub was successful
    else
      log_to_email_time "Scrub was successful"
      log_to_email_time "Scrubbed" $scrub_percent"% older than" $scrub_age "days"
      log_to_email ""
      nothing_to_scrub=0
    fi
  else
    # Array is not up to date - Exit the Script if --scrub-only was given
    if [ $scrub_only -eq 1 ]
    then
      log_to_email_time "Array not up-to-date - Sync Required"
      log_to_email_time "Changes detected are:"
      log_to_email "Equal:" $number_equal
      log_to_email "Added:" $number_added
      log_to_email "Removed:" $number_removed
      log_to_email "Updated:" $number_updated
      log_to_email "Moved:" $number_moved
      log_to_email "Copied:" $number_copied
      log_to_email "Restored:" $number_restored
      log_to_email_time "Cannot Proceed with Scrub - Stopping"
      log_to_email_time "Current status of the Array is as below:"
      log_to_email ""
      snapraid_status_to_email
      send_email "SnapRAID-DAILY: Sync Required"
      clean_up_logfiles
      exit $error_code

    else
      # Probably impossible to get to here as sync was just ran
      log_to_email_time "Array not up-to-date - Sync Required"
      log_to_email_time "Changes detected are:"
      log_to_email "Equal:" $number_equal
      log_to_email "Added:" $number_added
      log_to_email "Removed:" $number_removed
      log_to_email "Updated:" $number_updated
      log_to_email "Moved:" $number_moved
      log_to_email "Copied:" $number_copied
      log_to_email "Restored:" $number_restored
      log_to_email ""
    fi
  fi
}

# Send Final Email Log
function send_final_notification_email {
  # Print out that the Email will be sent or not
  if [ "${disable_emails_on_success}" == "no" ]
  then
    echo "Sending Final Notification Email..."
    echo ""
  else
    echo "Notification emails disabled on Success.."
    echo ""
  fi

  log_to_email "##############################"
  log_to_email "# SnapRAID-DAILY: Array Status"
  log_to_email "##############################"
  log_to_email_time "Current status of the Array is as below:"
  log_to_email ""

  # Call Snapraid Status to Put the Final Array Status into the Email
  snapraid_status_to_email

  # Send Final Notification Email if Script Ran all the way to the End,
  # and disable_emails_on_success is set to no, and determine subject
  if [ "${disable_emails_on_success}" == "no" ]
  then
    if [ $sync_only -eq 1 ]
    then
      if [ $sync_required -eq 1 ]
      then
        send_email "SnapRAID-DAILY: Sync OK"
      else
        send_email "SnapRAID-DAILY: Nothing to Sync"
      fi
    elif [ $scrub_only -eq 1 ]
    then
      # Refine Email subject if Nothing was found to scrub
      if [ $nothing_to_scrub == 1 ]
      then
        send_email "SnapRAID-DAILY: Nothing to Scrub"
      else
        send_email "SnapRAID-DAILY: Scrub OK"
      fi
    else
      # Change email subject if there was nothing found to sync AND scrub
      if [ $sync_required -eq 0 ] && [ $nothing_to_scrub -eq 1 ]
      then
        send_email "SnapRAID-DAILY: Nothing to Sync and Scrub"
      else
        send_email "SnapRAID-DAILY: All OK"
      fi
    fi
  fi
}

# Clean Up Log-Files Function
function clean_up_logfiles {
  # Delete all Logfiles Generated by the Script
  rm $status_logfile &> /dev/null
  rm $touch_logfile &> /dev/null
  rm $diff_logfile &> /dev/null
  rm $sync_logfile &> /dev/null
  rm $scrub_logfile &> /dev/null
  rm $scrub_diff_logfile &> /dev/null
  rm $email_body_logfile &> /dev/null
  rm $status_command_logfile &> /dev/null
  rm $scrub_command_logfile &> /dev/null
  rm $sync_command_logfile &> /dev/null
  rm $touch_command_logfile &> /dev/null
  rm $diff_command_logfile &> /dev/null
}

# Send Emails without a Log (No Errors Encountered)
function send_email() {
  # Only attempt to send emails if a muttrc file path and email address are defined
  if [ $enable_emails == 1 ]
    then 
    email_subject="${1}"
    mutt -F $muttrc_path -s "${email_subject}" $email_address < $email_body_logfile
  
    # Check if the email is sent successfully for the systemd logs
    if [ $? -eq 0 ]; then
      echo "Email Sent Successfully..."
      echo ""
    else
      echo "Problem Sending Email..."
      echo ""
    fi
  else
    echo "WARNING: Emails Disabled - Require mutt to be installed along with a muttrc_path" 
    echo "and email_address to be defined in snapraid-daily.conf"
  fi
}

# Send Emails with a Log (Errors Encountered)
function send_email_with_log() {
  # Only attempt to send emails if a muttrc file path and email address are defined
  if [ $enable_emails == 1 ]
  then
    email_subject="${1}"
    email_attachment="${2}"
    mutt -F $muttrc_path -s "${email_subject}" -a "${email_attachment}" -- $email_address < $email_body_logfile
  
    # Check if the email is sent successfully for the systemd logs
    if [ $? -eq 0 ]; then
      echo ""
      echo "Email Sent Successfully..."
    else
      echo ""
      echo "Problem Sending Email..."
    fi
  else
    echo "WARNING: Emails Disabled - Require mutt to be installed along with a muttrc_path" 
    echo "and email_address to be defined in snapraid-daily.conf"
  fi
}

###################################################
# SCRIPT START
###################################################

# Parse Input Arguments
parse_arguments "$@"

# Read Config File and Sanity Check its Contents and Dependencies
read_config_file
sanity_check

# Generate Logfiles for Analysis
generate_logfiles

# Start Email log and print greeting
print_greeting

# Check the intial status for errors or if touch is needed
initial_status_check

# Run Touch if it is required, check for deletion/moved thresholds
# and then sync the array. Only if the --scrub-only is not selected
if [ $scrub_only -eq 0 ]
then
  run_touch_if_needed
  check_array_for_changes_and_thresholds
  sync_array
fi

# Scrub & Check the output for errors if --sync-only is not selected
if [ $sync_only -eq 0 ]
then
  scrub_array
fi

# Send Final Notification Email if No Errors were detected, clean up
# /tmp logfiles and exit with success
send_final_notification_email
clean_up_logfiles
exit $success_code

