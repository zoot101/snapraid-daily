#!/bin/sh

set -e

# Source debconf library.
. /usr/share/debconf/confmodule
db_version 2.0

action="$1"
version="$2"

package_name="snapraid-daily"
config_file="/etc/${package_name}.conf"
extra_unit_file1="snapraid-sync"
extra_unit_file2="snapraid-scrub"
dropin_dir="/etc/systemd/system/snapraid-.service.d"
dropin_file="${dropin_dir}/user.conf"

main () {
  if [ "$action" = "configure" ] || [ "$action" = "reconfigure" ]
  then
    # Read debconf, and generate Drop-In File to Run as a Different User
    get_group_and_user
    new_dropin_file="no"
    generate_dropin_file
  
    # Delete the old systemd files if present without modifications, and update hook
    # naming in config file - Required only for upgrades from versions <1.5.0
    if dpkg --compare-versions "$version" lt "1.5.0-1" && [ ! -z "$version" ]; then
      delete_old_systemd_file "${package_name}.service"
      delete_old_systemd_file "${package_name}.timer"
      delete_old_systemd_file "${extra_unit_file1}.service"
      delete_old_systemd_file "${extra_unit_file1}.timer"
      delete_old_systemd_file "${extra_unit_file2}.service"
      delete_old_systemd_file "${extra_unit_file2}.timer"
      if [ -d "/run/systemd/system" ]; then systemctl --system daemon-reload >/dev/null || true; fi
  
      # Update Hook Names in Config if Required for Versions < 1.5.0
      if [ -f "$config_file" ]
      then
        if grep -qEw "start_hook=|end_hook=|notification_hook=" "$config_file"
        then
          update_hook_names_in_config
        fi
      fi
    # Otherwise reload systemd if a new dropin file was generated
    elif [ "$new_dropin_file" = "yes" ] && [ -d /run/systemd/system ]; then
      systemctl --system daemon-reload >/dev/null || true
    fi
  fi

  #DEBHELPER#

  exit 0
}

# Delete Older Redundant Systemd files if present. Okay to use md5sum as coreutils
# is a dependency. Unit files moved in versions >=1.5.0 
delete_old_systemd_file() {
  if [ -f "/usr/lib/systemd/system/${1}" ] && [ -f "/etc/systemd/system/${1}" ]
  then
    old_file_md5sum=$(md5sum "/etc/systemd/system/${1}" | awk '{print $1}')
    new_file_md5sum=$(md5sum "/usr/lib/systemd/system/${1}" | awk '{print $1}')
    if [ "$old_file_md5sum" = "$new_file_md5sum" ]
    then
      rm "/etc/systemd/system/${1}"
    fi
  fi
}

update_hook_names_in_config() {
  sed -i 's/start_hook=/start_hook1=/' "${config_file}"
  sed -i 's/end_hook=/end_hook1=/' "${config_file}"
  sed -i 's/notification_hook=/notification_hook1=/' "${config_file}"
}

get_group_and_user() {
  db_get snapraid-daily/systemd_user || true
  systemd_user="$RET"
  db_get snapraid-daily/systemd_group || true
  systemd_group="$RET"
}


write_dropin_file() {
cat <<EOF > "$dropin_file"
# Autogenerated during installation - recommended not to edit!
# To Change User or Group Below, issue the following command instead
# $ dpkg-reconfigure ${package_name}
#
# To tweak any other settings, create a different .conf drop-in file
# in this directory
#
[Service]
User=${systemd_user}
Group=${systemd_group}
EOF
}

generate_dropin_file() {
  # Check if the user is blank, if so - use root
  if [ -z "$systemd_user" ]; then
    systemd_user="root"
    systemd_group="root"
  fi

  # If the user input doesn't exist, default the group to the same value
  # Best to leave service fail so the user knows about the problem...
  if ! id "$systemd_user" >/dev/null; then
    systemd_group="$systemd_user"
  fi

  # Check if the group is empty, if it is, default to the default group for the user
  if [ -z "$systemd_group" ]; then
    systemd_group=$(groups "$systemd_user" | awk '{print $3}')
  fi

  # Now Check if the drop-in file exists
  if [ -f "$dropin_file" ]; then
    # Get the Group and User from the Drop-In file
    existing_user="$(grep "^User=" "$dropin_file" | sed 's/User=//;s/ *$//')"
    existing_group="$(grep "^Group=" "$dropin_file" | sed 's/Group=//;s/ *$//')"

    # Generate the drop-in file if the user/group are emptry or if theres a change
    if [ -z "$existing_user" ] || [ -z "$existing_group" ]; then
      write_dropin_file
      new_dropin_file="yes"
    elif [ "$existing_user" != "$systemd_user" ] || [ "$existing_group" != "$systemd_group" ]; then
      write_dropin_file
      new_dropin_file="yes"
    fi
  else
    write_dropin_file
    new_dropin_file="yes"
  fi  
}

# Call The Main Function 
main "$@"

