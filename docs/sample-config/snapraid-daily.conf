#!/usr/bin/env bash
###################################################
# SnapRAID-Daily Config
###################################################
# This file contains all of the input paramaters
# for the main SnapRAID-Daily bash script. 

###################################################
# Config Parameters
###################################################
# Snapraid Config File Path. Leave unchanged if
# not using a non-standard config file path. Comment
# out to assume /etc/snapraid.conf
snapraid_config_file_path="/etc/snapraid.conf"

###################################################
# Email Notification Parameters
###################################################
# Omitting or commenting out either of these will
# disable email functionality.

# MuttRC File for Emails
#muttrc_path="/path/to/muttrc/file"

# Email Address to Send Notification Emails to
#email_address="receive-notifications-here@example.com"

###################################################
# Sync Parameters
###################################################
# Deletion Threshold, the Script will Exit if this number
# is exceeded. To get the script to proceed, one can
# use the -o, --override-thresholds option. To disable
# permanently and sync every time regardless of the number
# of deletions, set to zero. If omitted the default
# assumed is 100.
deletion_threshold=100

# Moved Threshold, the Script will Exit if this number
# is exceeded. To get the script to proceed, one can
# use the -o, --override-thresholds option. To disable
# permanently and sync every time regardless of the number
# of moves, set to zero. Comment out to assume the
# default of 100.
moved_threshold=100

# Updated Threshold, the Script will Exit if this number
# is exceeded. To get the script to proceed, one can
# use the -o, --override-thresholds option. To disable
# permanently and sync every time regardless of the number
# of updated files, set to zero. Comment out to assume the
# default of 100.
updated_threshold=100

# By default SnapRAID is invoked with the "-h" option to
# calculate a preliminary hash on the data during sync. 
# Uncomment and set to no to disable. On by default
#sync_pre_hash="yes"

###################################################
# Scrub Parameters
###################################################
# Scrub Percentage to Scrub
# Should be a number between 0 and 100. The script will throw
# an error out otherwise. Comment out to use the default
# of 8%.
scrub_percent=8

# Age of Data to Scrub. Should be a positive number. The
# script will throw an error otherwise. Comment out to
# use the default of 21 days.
scrub_age=21

###################################################
# Extra Options (All Disabled by Default)
###################################################
# Disable emails and the custom notification hook on
# successful runs, error emails/notifications are unaffected
# and still sent as normal. Uncomment and set to yes to use.
# Emails and calls to the notification hook are always done
# by default, unless this option is used.
#disable_emails_on_success="no"

# Force Sync on Zero File Size (NOT Recommended)
# If a file is found to have zero size that previously
# didn't force a sync. Uncomment and set to "yes" to
# use. NOTE: NOT Recommended
#force_zero="no"

# Force Sync on Empty (NOT Recommended)
# If one or more of the disks are found to be empty,
# force a sync. Uncomment and set to "yes" to use.
# NOTE: NOT Recommended
#force_empty="no"

# Force Sync on UUID Change (NOT Recommended)
# If the UUID of one or more of the disks is found to
# change, force a sync. Uncomment and set to "yes" to
# use. NOTE: NOT Recommended
#force_uuid="no"

###################################################
# Start & End Hooks (Optional)
###################################################
# Path to custom hook scripts that are called throughout a run.
# Must be executable. Comment out if not using.
#
# Start-Hook: Called after initial checks have completed. Called
# with a "start" argument. Example:
# $ /path/to/start/hook start
# The main script will exit with an error if the start hook returns
# an error (non-zero) code.
#
# End-Hook: After the script has finished all tasks
# or if the script exits with an error. Called with an
# "end" argument. Example:
# $ /path/to/end/hook end
# Unlike the start hook, the main script does not end with an error
# if this hook reports an error and will continue to end.
#
# The use of the arguments "start" and "end" allow the same hook script
# to be used for both functions. If any variables are required for
# either hook script, they
# can be specifed below with with the use of "export"
#
# Note that these do not have to be bash scripts per se, they can
# be anything that can be ran from the command line. They don't have
# to use the "start" or "end" arguments. They also can be totally seperate
# scripts.
#start_hook="/path/to/hook"
#end_hook="/path/to/hook"

###################################################
# Notification Hook (Optional)
###################################################
# Path to a custom notification hook if one wishes to use
# an alternative form of notification than standard emails.
# The hook script is called like so:
# /path/to/hook "Email-Subject" "Email-Body" "Email-Attachment"
# The attachment is only included if an error was encountered.
# Leave commented out if not using.
#notification_hook="/path/to/notification/hook"

###################################################
# Hook Script Variables 
###################################################
# If any of the hook scripts require variables to be passed
# into them this can be done here. This is more elegant
# than having seperate config files for hook scripts etc.
# (Make sure not to forget the export)
# export var1="whatever"
# export var2="variable-here"
# etc.



